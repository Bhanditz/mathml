<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: dom-intro.xml,v 1.14 2007/06/24 09:52:16 dcarlis Exp $ -->
<!DOCTYPE spec [
<!ENTITY date "20070623">
<!ENTITY mathml-dom          SYSTEM "mathml-dom.xml"          >
<!ENTITY dom-bindings        SYSTEM "dom-bindings.xml"        >
]>
<spec w3c-doctype="wd">
<header>
<title>MathML 3.0 DOM</title>
<w3c-designation>mathmldom-&date;</w3c-designation>
<w3c-doctype>Working Draft</w3c-doctype>
<pubdate><day>23</day> <month>June</month> <year>2007</year></pubdate>
<publoc>
<loc href="http://www.w3.org/TR/2007/mathmldom-&date;">http://www.w3.org/TR/2007/mathmldom-&date;</loc>
</publoc>
<authlist>
<author role="editor">
<name>Ron Ausbrooks</name>
<affiliation>MacKichan Software</affiliation>
</author>
</authlist>
<status id="status">
<p>Internal working draft</p>
</status>
<abstract id="abstract">
<p>Document describes a DOM for MathML</p>
</abstract>
<langusage>
<language id="en">English</language>
</langusage>

<revisiondesc>
<p>This is revised version of first internal draft.</p>
</revisiondesc>

</header>
<body>
<div1 id="dom-intro" role="chapter8"><head>Document Object Model for MathML</head>
<!-- $Id: dom-intro.xml,v 1.14 2007/06/24 09:52:16 dcarlis Exp $ -->

  <issue role="open" id="update_DOM_intro">
    <head>Update DOM Introduction</head>
    <p>The current chapter describes MathML2, it will need to be updated in later drafts.</p>
  </issue>

<div2 id="dom-intro_intro"><head>Introduction</head>

<p>This document extends the Core API of the DOM Level 2 to describe
objects and methods specific to MathML elements in documents. The
functionality needed to manipulate basic hierarchical document structures,
elements, and attributes will be found in the core document; functionality
that depends on the specific elements defined in MathML will be found in
this document.</p>
<p>The actual DOM specification appears in  <specref ref="mathml-dom"/>.</p>

<p>The goals of the MathML-specific DOM API are:</p>
<ulist>
<item><p>To specialize and add functionality that relates specifically to
MathML elements.</p>
</item>
<item><p>To provide convenience mechanisms, where appropriate, for common
and frequent operations on MathML elements.</p>
</item>
</ulist>
<p>This document includes the following specializations for
MathML:
<ulist>
<item><p>A <code>MathMLElement</code> interface derived from the core
interface <code>Element</code>.  MathMLElement specifies the operations and
queries that can be made on any MathML element. Methods on
<code>MathMLElement</code> include those for the retrieval and modification
of attributes that apply to all MathML elements.</p>
</item>
<item><p>Various specializations of <code>MathMLElement</code> to encode 
syntactical restrictions imposed by MathML.</p>
</item>
<item><p>Specializations of <code>MathMLElement</code> representing all 
MathML elements with attributes extending beyond those specified in the 
<code>MathMLElement</code> interface. For all such attributes, the derived 
interface for the element contains explicit methods for setting and getting 
the values.</p>
</item>
<item><p>Special methods for insertion and retrieval of children of MathML
elements.  While the basic methods inherited from the <code>Node</code> and
<code>Element</code> interfaces must clearly remain available, it is felt
that in many cases they may be misleading. Thus, for instance, the
<code>MathMLFractionElement</code> interface provides for access to
<code>numerator</code> and <code>denominator</code> attributes; a call to
<code>setDenominator(newNode)</code> is less ambiguous from a calling
application's perspective than a call to <code>Node::replaceNode(newNode,
Node::childNodes().item(2))</code>.</p>
</item>
</ulist>
</p>

<p>Where no special convenience methods are provided for retrieving attributes or 
child Nodes, the basic functionality of the Core DOM should be used to retrieve them.</p>

<p>MathML specifies rules that are invisible to generic XML processors and
validators. The fact that MathML DOM objects are required to respect these
rules, and to throw exceptions when those rules are violated, is an
important reason for providing a MathML-specific DOM extension.</p>

<p>There are basically two kinds of additional MathML grammar and syntax
rules. One kind involves placing additional criteria on attribute
values. For example, it is not possible in pure XML to require that an
attribute value be a positive integer. The second kind of rule specifies
more detailed restrictions on the child elements (for example on ordering)
than are given in the DTD. For example, it is not possible in XML to
specify that the first child be interpreted one way, and the second in
another. The MathML DOM objects are required to provide this
interpretation.</p>

<p>MathML ignores whitespace occurring outside token elements.
Non-whitespace characters are not allowed there. Whitespace occurring
within the content of token elements is <quote>trimmed</quote> from the
ends (i.e. all whitespace at the beginning and end of the content is
removed), and <quote>collapsed</quote> internally (i.e. each sequence of 1
or more whitespace characters is replaced with one blank character). The
MathML DOM elements perform this whitespace trimming as necessary. In
MathML, as in XML, <quote>whitespace</quote> means blanks, tabs, newlines,
or carriage returns, i.e. characters with hexadecimal Unicode codes U+0020,
U+0009, U+000a, or U+000d, respectively.</p>

<div3><head>hasFeature String</head>
<p>Support for the MathML Document Object Model may be queried by calling the
<kw>DOMImplementation::hasFeature</kw> method with the test string "org.w3c.dom.mathml".</p>
</div3>

<div3><head>MathML DOM Extensions</head>
<p>It is expected that a future version of the MathML DOM may deal with issues which 
are not resolved here. Some of these are described here.</p>

<div4><head>Traversal and Range Interfaces</head>
<p>It is likely that a need will become obvious for MathML-specific specializations	of 
interfaces belonging to the
<xspecref href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html">
Traversal</xspecref> and 
<xspecref href="http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html">Range</xspecref> 
Modules of the Document Object Model Level 2. The order of traversal of bound variables, conditions,
and declarations - or whether they should be omitted from a given traversal altogether - 
offers an example of a potential utility for such specializations. However,	it would be 
premature to specify any such interfaces at this time. Implementation experience will 
be necessary in order to discover the appropriate interfaces which should be specified.</p>
</div4>
<div4><head>Embedding Issues</head>
<p>The interaction between the Document Object Model representing specialized XML markup (such
as MathML) embedded	inside other types of XML markup (such as XHTML) and that representing the host
document is	as yet undefined. If and when such interactions are specified, we hope that implementors
will be able to use them to enhance the usefulness of the MathML Document Object Model.</p>
<p>It may be necessary, however, to add some interface definitions to the MathML Document Object
Model in order to make this possible. If so, we hope to be able to do this at some future time.</p>
</div4>
</div3>
</div2>
</div1>
</body>
<back>
&mathml-dom;
&dom-bindings;
</back>
</spec>